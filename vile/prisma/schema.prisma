generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique
  firstname    String?
  studio       Media?
  lastname     String?
  clerkId      String         @unique
  image        String?
  trial        Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  mediaId      String?        @db.ObjectId
  workspace    WorkSpace[]
  videos       Video[]
  subscription Subscription?
  members      Member[]
  notification Notification[]
  sender       Invite[]       @relation("sender")
  receiver     Invite[]       @relation("receiver")
}

model Subscription {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  User       User?             @relation(fields: [userId], references: [id])
  userId     String?           @unique @db.ObjectId
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

enum PRESET {
  HD
  SD
}

model Media {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  screen String?
  mic    String?
  camera String?
  preset PRESET  @default(SD)
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.ObjectId
}

enum Type {
  PERSONAL
  PUBLIC
}

model WorkSpace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  type      Type
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  folders   Folder[]
  videos    Video[]
  members   Member[]
  invite    Invite[]
}

model Folder {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @default("Untitled Folder")
  createdAt   DateTime   @default(now())
  workspace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.ObjectId
  video       Video[]
}

model Video {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String?    @default("untitled Video")
  description String?    @default("No Description")
  source      String     @unique
  createdAt   DateTime   @default(now())
  folder      Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?    @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @db.ObjectId
  processing  Boolean    @default(true)
  workSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String?    @db.ObjectId
  views       Int        @default(0)
  summary     String?
}

model Member {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.ObjectId
  createdAt   DateTime   @default(now())
  member      Boolean    @default(true)
  workSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String     @db.ObjectId
}

model Notification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.ObjectId
  content String
}

model Invite {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  sender      User?      @relation("sender", fields: [senderId], references: [id])
  senderId    String     @db.ObjectId
  receiver    User?      @relation("receiver", fields: [receiverId], references: [id])
  receiverId  String     @db.ObjectId
  content     String
  workSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.ObjectId
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}